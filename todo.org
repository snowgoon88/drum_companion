* __CURRENT__ : Window size in GUI or (Args | Play/Pause/Stop Sequence) w/o GUI
* TODO [0/2] Ressources to try
** TODO [5/6] GUI : imgui
https://github.com/ocornut/imgui
- examples_glfw_opengl2/3 work
*** DONE Compile with WAF a basic example 
*** DONE Define Play/Pause/Stop button
*** DONE Play/Pause Pattern without miniaudio engine
*** DONE ESC for quitting [02-pp-pattern]
*** DONE Set Window size [00-button]
*** TODO Adapt Window Size
*** [/] Make my own basic example
BPM =
size = | unit = 
unit x size button
Play/Pause
Volume

** TODO [3/6] Audio : miniaudio
<<miniaudio>>
https://github.com/mackron/miniaudio
Engine où on peut "chaîner" des data_source
Il semble que l'on peut aussi dire quand on joue une source (ms)
*** DONE compile basic example (clave) with waf
*** DONE [3/3] Load clave and play regurlarly
**** DONE using std::this_thread::sleep_for(std::chrono::milliseconds(x));
**** DONE within a while loop, with delay for the next sound ?
**** either because engine can play at given time ?
**** DONE or by checking the time in callback loop ? => in PatternAudio
*** DONE Play/Pause SOUND !!!
*** TODO better args for drum_compagnon (sign bpm, pattern)
*** TODO logging with DEFINES
*** TODO Play/Pause/Stop Pattern (sequence of Sounds)
* [0/2] Safe code
** TODO Ensure notes in PatternAudio exist in SoundEngine
** [1/2] when Ctrl-C, take time to destry Objects
*** DONE Linux
- https://stackoverflow.com/questions/1641182/how-can-i-catch-a-ctrl-c-event
*** TODO Windows
- https://docs.microsoft.com/en-us/windows/console/registering-a-control-handler-function
